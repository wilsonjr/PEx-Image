/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package visualizer.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import visualizer.datamining.clustering.SilhouetteCoefficient;
import visualizer.datamining.dataanalysis.KruskalStress;
import visualizer.datamining.dataanalysis.SammonStress;
import visualizer.datamining.dataanalysis.Stress;
import visualizer.graph.Graph;
import visualizer.graph.Representative;
import visualizer.graph.Vertex;
import visualizer.matrix.Matrix;
import visualizer.matrix.MatrixFactory;
import visualizer.projection.distance.Dissimilarity;
import visualizer.projection.distance.DissimilarityFactory;
import visualizer.projection.distance.DissimilarityType;
import visualizer.projection.distance.DistanceMatrix;
import visualizer.projection.representative.AnalysisType;
import visualizer.projection.representative.BoxplotDataGenerator;
import visualizer.projection.representative.BoxplotRepresentative;
import visualizer.projection.representative.NeighborhoodHitClusterData;
import visualizer.projection.representative.NeighborhoodPreservationClusterData;
import visualizer.projection.representative.SilhouetteCoefficientClusterData;
import visualizer.projection.representative.StressClusterData;
import visualizer.util.OpenDialog;
import visualizer.util.PExConstants;
import visualizer.util.Util;
import visualizer.util.filefilter.DATAFilter;

/**
 *
 * @author wilson
 */
public class GroupAnalysisView extends javax.swing.JFrame {
    private String arquivo;
    private List<String> ids = new ArrayList<>();
    private int nClusters = 0;
    private Viewer[] gv = null;
    private List<Matrix> selected = null, projection = null;
    private List<List<Vertex>> selectedVertex = null;
    private File file = null;
    
    private static final String CLASS_NAME;
    static {
        StackTraceElement[] stackTrace = new Throwable().getStackTrace();
        CLASS_NAME = stackTrace[0].getClassName();
    }
    /**
     * Creates new form GroupAnalysisView
     */
    protected GroupAnalysisView() {
        initComponents();
        
        DissimilarityType.getTypes().stream().filter(
                (disstype)->(disstype != DissimilarityType.KOLMOGOROV && disstype != DissimilarityType.NONE)
        ).forEach((d)->distanceTypeComboBox.addItem(d));
        
        arquivo = "";
        setResizable(false);
        
        nHitCheckBox.setSelected(true);
        nPreservationCheckBox.setSelected(true);
        sCoefficientCheckBox.setSelected(true);
        stressCheckBox.setSelected(true);
        
        saveDataCheckBoxActionPerformed(null);
        
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    
    public void setFile(String arquivo) {
        this.arquivo = arquivo;
    }
    
    public void invalidade() {
        arquivo = "";
        ids.clear();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nNeighborsTextField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nHitCheckBox = new javax.swing.JCheckBox();
        nPreservationCheckBox = new javax.swing.JCheckBox();
        sCoefficientCheckBox = new javax.swing.JCheckBox();
        stressCheckBox = new javax.swing.JCheckBox();
        stressTypeComboBox = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        distanceTypeComboBox = new javax.swing.JComboBox();
        analysisTypeComboBox = new javax.swing.JComboBox();
        compareCheckBox = new javax.swing.JCheckBox();
        closeButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        pointsTextField = new javax.swing.JTextField();
        searchJButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        fileDataTextField = new javax.swing.JTextField();
        fileDataButton = new javax.swing.JButton();
        saveDataCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Group Analysis"));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Number of Neighbors"));

        jLabel1.setText("Nearest Neighbors:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nNeighborsTextField)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nNeighborsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Metrics"));

        jLabel2.setText("Metrics:");

        nHitCheckBox.setText("Neighborhood Hit");
        nHitCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nHitCheckBoxActionPerformed(evt);
            }
        });

        nPreservationCheckBox.setText("Neighborhood Preservation");

        sCoefficientCheckBox.setText("Silhouette Coefficient");

        stressCheckBox.setText("Stress");

        stressTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kruskal's Stress", "Sammon's Stress" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(stressCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stressTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nPreservationCheckBox)
                            .addComponent(nHitCheckBox)
                            .addComponent(sCoefficientCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nHitCheckBox)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nPreservationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sCoefficientCheckBox)
                .addGap(3, 3, 3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stressCheckBox)
                    .addComponent(stressTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose the Distance Type and Analysis Type"));

        analysisTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Global Analysis", "Local Analysis", "Both" }));

        compareCheckBox.setText("Compare with Projection");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(distanceTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92)
                .addComponent(analysisTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(compareCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distanceTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analysisTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(compareCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Source File"));

        searchJButton.setText("Search...");
        searchJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(pointsTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchJButton))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchJButton)
                    .addComponent(pointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Save Data"));

        fileDataButton.setText("Search...");
        fileDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileDataButtonActionPerformed(evt);
            }
        });

        saveDataCheckBox.setText("Do you want save data?");
        saveDataCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDataCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(fileDataTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileDataButton))
                    .addComponent(saveDataCheckBox))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileDataTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(saveDataCheckBox)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(generateButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nHitCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nHitCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nHitCheckBoxActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        
        try {
            DissimilarityType mtype = (DissimilarityType) distanceTypeComboBox.getSelectedItem();
            Dissimilarity diss = DissimilarityFactory.getInstance(mtype);

            int analysisType = analysisTypeComboBox.getSelectedIndex();            
            Stress stress = chooseStressType();
            int nneighbors = Integer.parseInt(nNeighborsTextField.getText());

            List<BoxplotDataGenerator> boxplotList = new ArrayList<>();
            
            Matrix matrix = MatrixFactory.getInstance(arquivo, ids);
            DistanceMatrix dmat = new DistanceMatrix(matrix, diss);
            Matrix matrixProjection = MatrixFactory.getInstance(arquivo);
            DistanceMatrix dmatProjection = new DistanceMatrix(matrixProjection, diss);

            addSelectedMetrics(nneighbors, dmat, dmatProjection, analysisType, boxplotList, diss, stress);
            
            for( int i = 0; i < selected.size(); ++i ) {
                String title = getViewerTitle(i);
                
                BoxplotRepresentative boxplot = createBoxPlotRepresentative(boxplotList);
                
                JPanel panelRepresentative = boxplot.generateRepresentative(selected.get(i), projection.get(i));                
                Image imgRep = boxplot.representativeAsImage();
                Representative rep = new Representative(selectedVertex.get(i), imgRep, 
                        selectedVertex.get(i).get(0).getColor(), panelRepresentative);
                rep.setShowThisRepresentative(true);

                gv[i].getGraph().addRepresentative(rep);                
                wantsSave(boxplot, title);
                gv[i].updateImage();                  
            }
                 
            setVisible(false);
        } catch( IOException e ) {
            throw new RuntimeException(e);
        }
        
        
    }//GEN-LAST:event_generateButtonActionPerformed

    private String getViewerTitle(int i) {
        String split[] = gv[i].getTitle().split("\\\\");
        String title = split[split.length-1].split("\\.")[0];
        return title;
    }

    private Stress chooseStressType() {
        return (stressTypeComboBox.getSelectedIndex() == 0) ? new KruskalStress() : new SammonStress();
    }

    private void addSelectedMetrics(int nneighbors, DistanceMatrix dmat, DistanceMatrix dmatProjection, int analysisType, List<BoxplotDataGenerator> boxplotList, Dissimilarity diss, Stress stress) {
        if( nPreservationCheckBox.isSelected() ) {
            NeighborhoodPreservationClusterData nClusterData = new NeighborhoodPreservationClusterData(nneighbors, dmat, dmatProjection, AnalysisType.which(analysisType));
            boxplotList.add(nClusterData);
        }
        
        if( nHitCheckBox.isSelected() ) {
            boxplotList.add(new NeighborhoodHitClusterData(nneighbors, AnalysisType.which(analysisType)));
        }
        
        if( sCoefficientCheckBox.isSelected() ) {
            
            if( analysisType == AnalysisType.LOCAL.getValue() && nClusters > 1  ) { // local
                boxplotList.add(new SilhouetteCoefficientClusterData(diss, AnalysisType.LOCAL));
            } else if( analysisType == AnalysisType.BOTH.getValue() ) {
                if( nClusters > 1 )
                    boxplotList.add(new SilhouetteCoefficientClusterData(diss, AnalysisType.BOTH));
                else
                    boxplotList.add(new SilhouetteCoefficientClusterData(diss, AnalysisType.GLOBAL));
            } else {
                boxplotList.add(new SilhouetteCoefficientClusterData(diss, AnalysisType.GLOBAL));
            }
            
        }
        
        if( stressCheckBox.isSelected() ) {
            boxplotList.add(new StressClusterData(dmatProjection, dmat, stress, AnalysisType.which(analysisType)));
        }
    }

    private BoxplotRepresentative createBoxPlotRepresentative(List<BoxplotDataGenerator> boxplotList) {
        return new BoxplotRepresentative(boxplotList, compareCheckBox.isSelected());
    }
    
    private void wantsSave(BoxplotRepresentative boxplotRep, String title) {
        if( !fileDataTextField.getText().isEmpty() ) {
            
            try {
                String filename = fileDataTextField.getText().split("\\.")[0]+"_"+title+".data";
                
                file = new File(filename);
                if( !file.exists() )
                    file.createNewFile();
                
                boxplotRep.save(file);
                
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(),
                        "Problems with the file", JOptionPane.ERROR_MESSAGE);                
            }  
            
        }               
    }

    private void searchJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchJButtonActionPerformed
        int result = OpenDialog.showOpenDialog(new DATAFilter(), this);
        if( result == JFileChooser.APPROVE_OPTION ) {
            String filename = OpenDialog.getFilename();
            arquivo = filename;
            pointsTextField.setText(filename);
        }
    }//GEN-LAST:event_searchJButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void fileDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileDataButtonActionPerformed
        
        JFileChooser saveDialog = new JFileChooser();
        int result = saveDialog.showSaveDialog(this);

        if( result == JFileChooser.APPROVE_OPTION ) {
            
            String filename = saveDialog.getSelectedFile().getAbsolutePath();
            fileDataTextField.setText(filename);
        }
    }//GEN-LAST:event_fileDataButtonActionPerformed

    private void saveDataCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDataCheckBoxActionPerformed
        boolean state = saveDataCheckBox.isSelected();
        fileDataTextField.setEditable(state);
        fileDataButton.setEnabled(state);
    }//GEN-LAST:event_saveDataCheckBoxActionPerformed
    
    public static GroupAnalysisView getInstance() {        
        return (GroupAnalysisView) SingletonRegistry.getInstance(CLASS_NAME);
    }
    
    public void display(Viewer[] gv) {
        prepareWindow();
        
        selectedVertex = new ArrayList<>();
        selected = new ArrayList<>();
        projection = new ArrayList<>();
        for( int i = 0; i < gv.length; ++i ) {
            this.gv = gv;
            Graph graph = gv[i].getGraph();
            selectedVertex.add(graph.getVertex().stream().filter((v)->v.isSelected()).collect(Collectors.toCollection(ArrayList::new)));
            if( !selectedVertex.get(i).isEmpty() ) {

                try {
                    List<Float> clusters = SilhouetteCoefficient.getClusters(Util.exportSelectedProjection(selectedVertex.get(i), 
                                                                        gv[i].getCurrentScalar() == null ? 
                                                                         graph.getScalarByName(PExConstants.DOTS) :
                                                                        gv[i].getCurrentScalar()).getClassData());

                    nClusters = clusters.size();                
                    ids.clear();
                    graph.getVertex().stream().filter((v)->v.isSelected()).forEach((v)->ids.add(v.getUrl()));

                    selected.add(Util.exportSelectedProjection(selectedVertex.get(i), 
                                                                    gv[i].getCurrentScalar() == null ? 
                                                                     graph.getScalarByName(PExConstants.DOTS) :
                                                                    gv[i].getCurrentScalar()));
                    projection.add(Util.exportProjection(graph, gv[i].getCurrentScalar()));

                    pack();
                    setLocationRelativeTo(this.getParent());
                    setVisible(true);
                } catch( IOException e ) {
                    throw new RuntimeException(e);
                }
            }
        }
        
    }

    private void prepareWindow() {
        file = null;
        fileDataTextField.setText("");
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox analysisTypeComboBox;
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox compareCheckBox;
    private javax.swing.JComboBox distanceTypeComboBox;
    private javax.swing.JButton fileDataButton;
    private javax.swing.JTextField fileDataTextField;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JCheckBox nHitCheckBox;
    private javax.swing.JTextField nNeighborsTextField;
    private javax.swing.JCheckBox nPreservationCheckBox;
    private javax.swing.JTextField pointsTextField;
    private javax.swing.JCheckBox sCoefficientCheckBox;
    private javax.swing.JCheckBox saveDataCheckBox;
    private javax.swing.JButton searchJButton;
    private javax.swing.JCheckBox stressCheckBox;
    private javax.swing.JComboBox stressTypeComboBox;
    // End of variables declaration//GEN-END:variables

    
}
